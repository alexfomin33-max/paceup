import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
//import 'package:flutter_secure_storage/flutter_secure_storage.dart';

/// üîπ –≠–∫—Ä–∞–Ω –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏–∑ SMS –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
class LoginSmsScreen extends StatefulWidget {
  final String phone; // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥

  const LoginSmsScreen({super.key, required this.phone});

  @override
  State<LoginSmsScreen> createState() => LoginSmsScreenState();
}

class LoginSmsScreenState extends State<LoginSmsScreen> {
  /// üîπ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è 6 –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –∫–æ–¥–∞
  final controllers = List.generate(6, (_) => TextEditingController());

  /// üîπ FocusNode –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏
  final nodes = List.generate(6, (_) => FocusNode());
  //final storage = const FlutterSecureStorage();

  @override
  void initState() {
    super.initState();

    /// üîπ –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fetchApiData();
  }

  /// üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> fetchApiData() async {
    try {
      final response = await http.post(
        Uri.parse('http://api.paceup.ru/login_user.php'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'phone': widget.phone}),
      );
      print(response.body);
    } catch (e) {
      // üîπ –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
      debugPrint("fetchApiData error: $e");
    }
  }

  /// üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä
  Future<void> resendCode() async {
    try {
      final response = await http.post(
        Uri.parse('http://api.paceup.ru/resendlgn_code.php'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'phone': widget.phone}),
      );
      print(response.body);
    } catch (e) {
      debugPrint("resendCode error: $e");
    }
  }

  /// üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
  Future<void> enterCode(String userCode) async {
    try {
      final response = await http.post(
        Uri.parse('http://api.paceup.ru/enterlgn_code.php'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'code': userCode, 'phone': widget.phone}),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        // üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ –≤ int, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî 0
        final codeValue = int.tryParse(data['code'].toString()) ?? 0;

        /// üîπ –ï—Å–ª–∏ –∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω –∏ –≤–∏–¥–∂–µ—Ç –≤—Å—ë –µ—â—ë –≤ –¥–µ—Ä–µ–≤–µ
        if (codeValue > 0 && mounted) {
          //await storage.write(key: "access_token", value: data["access_token"]);
          //await storage.write(key: "refresh_token", value: data["refresh_token"]);
          //await storage.write(key: "user_id", value: data['code']);
          Navigator.pushReplacementNamed(
            context,
            '/lenta',
            arguments: {
              'userId': codeValue,
            }, // –ø–µ—Ä–µ–¥–∞–µ–º userId –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
          );
        }
      }
    } catch (e) {
      debugPrint("enterCode error: $e");
    }
  }

  /// üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞
  Widget _buildCodeField(int index) {
    return SizedBox(
      width: 45, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
      height: 50, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
      child: TextFormField(
        controller: controllers[index],
        focusNode: nodes[index],
        style: const TextStyle(color: Colors.white, fontSize: 20),
        keyboardType: TextInputType.number,
        textAlign: TextAlign.center,
        maxLength: 1, // —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞
        decoration: InputDecoration(
          counterText: "", // —Å–∫—Ä—ã—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
          enabledBorder: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.white),
            borderRadius: BorderRadius.circular(10),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: const BorderSide(color: Colors.white),
            borderRadius: BorderRadius.circular(10),
          ),
          filled: true,
          fillColor: Colors.transparent,
          contentPadding: const EdgeInsets.all(0),
        ),
        onChanged: (v) {
          // üîπ –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
          if (v.isNotEmpty && index < 5) {
            nodes[index + 1].requestFocus(); // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
          } else if (v.isEmpty && index > 0) {
            nodes[index - 1].requestFocus(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—é
          } else if (index == 5) {
            // üîπ –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –≤–≤–µ–¥–µ–Ω ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            final code = controllers.map((c) => c.text).join();
            enterCode(code);
          }
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          /// üîπ –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          Image.asset("assets/background.png", fit: BoxFit.cover),

          /// üîπ –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ª–æ–π –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
          Container(color: Colors.black.withValues(alpha: 0.5)),

          /// üîπ –õ–æ–≥–æ—Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
          Align(
            alignment: Alignment.topCenter,
            child: Padding(
              padding: EdgeInsets.only(
                top: MediaQuery.of(context).size.height * 0.11,
              ),
              child: Image.asset(
                "assets/logo_icon.png",
                width: 175,
                height: 175,
                fit: BoxFit.contain,
              ),
            ),
          ),

          /// üîπ –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏
          Align(
            alignment: Alignment.bottomCenter,
            child: Padding(
              padding: const EdgeInsets.symmetric(
                horizontal: 40,
                vertical: 100,
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  /// üîπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  Text(
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä\n${widget.phone}",
                    style: const TextStyle(color: Colors.white, fontSize: 15),
                    textAlign: TextAlign.left,
                  ),
                  const SizedBox(height: 20),

                  /// üîπ –†—è–¥ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: List.generate(
                      6,
                      (index) => _buildCodeField(index),
                    ),
                  ),
                  const SizedBox(height: 15),

                  /// üîπ –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
                  TextButton(
                    onPressed: resendCode,
                    style: const ButtonStyle(
                      overlayColor: WidgetStatePropertyAll(Colors.transparent),
                      padding: WidgetStatePropertyAll(
                        EdgeInsets.symmetric(vertical: 15),
                      ),
                    ),
                    child: const Text(
                      "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 15,

                        fontWeight: FontWeight.w500,
                      ),
                      textAlign: TextAlign.left,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
