import 'package:flutter/cupertino.dart';
import '../../../../../theme/app_theme.dart';
import '../models/main_tab_data.dart';

class GearSectionSliver extends StatelessWidget {
  final String title; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ ("–ö—Ä–æ—Å—Å–æ–≤–∫–∏"/"–í–µ–ª–æ—Å–∏–ø–µ–¥")
  final List<GearItem> items; // –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
  final bool isBike; // –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—å—é –≤—Ç–æ—Ä–æ–π –º–µ—Ç—Ä–∏–∫–∏: "–°–∫–æ—Ä–æ—Å—Ç—å" –∏–ª–∏ "–¢–µ–º–ø"
  final VoidCallback? onItemTap; // üëà –∫–æ–ª–±—ç–∫ –Ω–∞ —Ç–∞–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ

  const GearSectionSliver({
    super.key,
    required this.title,
    required this.items,
    required this.isBike,
    this.onItemTap,
  });

  @override
  Widget build(BuildContext context) {
    // childCount = 2 (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ—Ç—Å—Ç—É–ø) + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
    final childCount = items.length + 2;

    return SliverList(
      delegate: SliverChildBuilderDelegate((context, index) {
        // 0: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        if (index == 0) {
          return _SectionTitle(title);
        }
        // 1: –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if (index == 1) {
          return const SizedBox(height: 8);
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∏
        final i = index - 2;
        if (i < 0 || i >= items.length) return const SizedBox.shrink();

        final g = items[i];
        final isLast = i == items.length - 1;

        return Padding(
          // –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø —Å–µ–∫—Ü–∏–∏: —É –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –æ–Ω —á—É—Ç—å –±–æ–ª—å—à–µ, –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ
          padding: EdgeInsets.only(bottom: isLast ? (isBike ? 16 : 12) : 12),
          child: GestureDetector(
            behavior: HitTestBehavior.opaque,
            onTap: onItemTap, // üëà –¥–µ—Ä–≥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–æ–ª–±—ç–∫
            child: _GearCard(
              title: g.title,
              imageAsset: g.imageAsset,
              stat1Label: '–ü—Ä–æ–±–µ–≥:',
              stat1Value: g.mileage,
              stat2Label: isBike ? '–°–∫–æ—Ä–æ—Å—Ç—å:' : '–¢–µ–º–ø:',
              stat2Value: g.paceOrSpeed,
            ),
          ),
        );
      }, childCount: childCount),
    );
  }
}

/// –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
class _SectionTitle extends StatelessWidget {
  final String text;
  const _SectionTitle(this.text);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Align(
        alignment: Alignment.centerLeft,
        child: Text(text, style: AppTextStyles.h15w6),
      ),
    );
  }
}

/// –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è: –∫–∞—Ä—Ç–∏–Ω–∫–∞ + –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–≤–µ –∫—Ä–∞—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
class _GearCard extends StatelessWidget {
  final String title;
  final String imageAsset;
  final String stat1Label;
  final String stat1Value;
  final String stat2Label;
  final String stat2Value;

  const _GearCard({
    required this.title,
    required this.imageAsset,
    required this.stat1Label,
    required this.stat1Value,
    required this.stat2Label,
    required this.stat2Value,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Container(
        decoration: BoxDecoration(
          color: AppColors.surface,
          borderRadius: BorderRadius.circular(AppRadius.md),
          border: Border.all(color: AppColors.border, width: 0.5),
        ),
        padding: const EdgeInsets.fromLTRB(10, 12, 10, 12),
        child: Row(
          children: [
            // –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ClipRRect(
              borderRadius: BorderRadius.circular(AppRadius.sm),
              child: Image.asset(
                imageAsset,
                width: 72,
                height: 44,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(width: 12),
            // –¢–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ + "–∫–∞—Ä–∞–Ω–¥–∞—à" —Å–ø—Ä–∞–≤–∞
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          title,
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                          style: AppTextStyles.h14w5,
                        ),
                      ),
                      const SizedBox(width: 6),
                      const Icon(
                        CupertinoIcons.pencil,
                        size: 16,
                        color: AppColors.textSecondary,
                      ),
                      const SizedBox(width: 2),
                    ],
                  ),
                  const SizedBox(height: 8),
                  // –î–≤–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                  Row(
                    children: [
                      _InlineStat(label: stat1Label, value: stat1Value),
                      const SizedBox(width: 16),
                      _InlineStat(label: stat2Label, value: stat2Value),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// –ù–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "–º–µ—Ç–∫–∞ + –∑–Ω–∞—á–µ–Ω–∏–µ"
class _InlineStat extends StatelessWidget {
  final String label;
  final String value;
  const _InlineStat({required this.label, required this.value});

  @override
  Widget build(BuildContext context) {
    return RichText(
      text: TextSpan(
        style: const TextStyle(fontFamily: 'Inter', fontSize: 13),
        children: [
          TextSpan(
            text: '$label ',
            style: const TextStyle(color: AppColors.textSecondary),
          ),
          TextSpan(
            text: value,
            style: const TextStyle(
              fontWeight: FontWeight.w500,
              color: AppColors.textPrimary,
            ),
          ),
        ],
      ),
    );
  }
}
