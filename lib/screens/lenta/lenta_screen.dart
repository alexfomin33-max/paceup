import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import '../../theme/app_theme.dart';
import 'widgets/activity_block.dart';
import 'newpost_screen.dart';
import 'widgets/comments_bottom_sheet.dart';
import 'package:modal_bottom_sheet/modal_bottom_sheet.dart';
import 'chat_screen.dart'; // –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
import 'notifications_screen.dart';
import '../../models/notification_item.dart';
import 'dart:ui'; // –¥–ª—è ImageFilter.blur
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:paceup/models/activity_lenta.dart';
import 'dart:async';

/// üîπ –≠–∫—Ä–∞–Ω –õ–µ–Ω—Ç—ã (Feed)
class LentaScreen extends StatefulWidget {
  final int userId;
  final VoidCallback? onNewPostPressed;

  const LentaScreen({super.key, required this.userId, this.onNewPostPressed});

  @override
  State<LentaScreen> createState() => _LentaScreenState();
}

class _LentaScreenState extends State<LentaScreen> {
  late Future<List<Activity>> _future;

  @override
  void initState() {
    super.initState();
    _future = _loadActivities();
  }

  Future<List<Activity>> _loadActivities() async {
    final res = await http.post(
      Uri.parse('http://api.paceup.ru/activities_lenta.php'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({'userId': widget.userId, 'limit': 20, 'page': 1}),
    );
    if (res.statusCode != 200) {
      throw Exception('HTTP ${res.statusCode}: ${res.body}');
    }

    final decoded = json.decode(res.body);
    // –µ—Å–ª–∏ –±—ç–∫ –æ—Ç–¥–∞—ë—Ç {"data":[...]} ‚Äî –≤–æ–∑—å–º–∏ decoded['data']
    final List list = decoded is Map<String, dynamic>
        ? (decoded['data'] as List)
        : (decoded as List);

    return list
        .map((e) => Activity.fromApi(e as Map<String, dynamic>))
        .toList();
  }

  int _unreadCount =
      3; // –ø—Ä–∏–º–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  final List<NotificationItem> _notifications = [
    NotificationItem(
      title: "–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
      body: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ê–ª–µ–∫—Å–µ–π –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–∞—Å.",
      date: DateTime.now().subtract(const Duration(minutes: 5)),
      avatarAsset: "assets/Avatar_1.png",
    ),
    NotificationItem(
      title: "–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
      body: "–ú–∞—Ä–∏—è –æ—Å—Ç–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –ø–æ—Å—Ç—É.",
      date: DateTime.now().subtract(const Duration(hours: 1)),
      avatarAsset: "assets/Avatar_2.png",
    ),
    NotificationItem(
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
      body: "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
      date: DateTime.now().subtract(const Duration(days: 1)),
      avatarAsset: "assets/Avatar_3.png",
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ‚ö°Ô∏è —Ñ–æ–Ω —É–±–∏—Ä–∞–µ–º ‚Äî —Ç–µ–ø–µ—Ä—å AppBar –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –ø–æ–≤–µ—Ä—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      backgroundColor: const Color(0xFFF3F4F6),

      // ‚ö°Ô∏è —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç—É —É—Ö–æ–¥–∏—Ç—å –ø–æ–¥ AppBar
      extendBodyBehindAppBar: true,

      appBar: AppBar(
        // –ª—ë–≥–∫–∞—è –±–µ–ª–∞—è –¥—ã–º–∫–∞ + –±—É–¥–µ—Ç —Å–º–µ—à–∏–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–º—ã—Ç—ã–º —Ñ–æ–Ω–æ–º
        backgroundColor: Colors.white.withValues(alpha: 0.50),
        elevation: 0,
        scrolledUnderElevation: 0,
        surfaceTintColor: Colors.transparent,

        // ‚¨áÔ∏è —ç—Ç–æ –∏ –µ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å—Ç–µ–∫–ª–∞
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20), // –º–æ–∂–Ω–æ 16‚Äì28
            child: Container(color: Colors.transparent), // —Å–ª–æ–π-–∑–∞–≥–ª—É—à–∫–∞
          ),
        ),

        centerTitle: true,
        automaticallyImplyLeading: false,
        leadingWidth: 100,

        // —Ç–æ–Ω–∫–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–≤–µ—Ä—Ö—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        shape: const Border(
          bottom: BorderSide(color: Color(0x33FFFFFF), width: 0.6),
        ),

        // ‚Äî‚Äî‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –±—ã–ª–∏ ‚Äî‚Äî‚Äî
        leading: Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            IconButton(
              icon: const Icon(CupertinoIcons.star),
              padding: EdgeInsets.zero,
              constraints: const BoxConstraints(),
              onPressed: () {},
            ),
            IconButton(
              icon: const Icon(CupertinoIcons.add_circled),
              padding: EdgeInsets.zero,
              constraints: const BoxConstraints(),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const NewPostScreen()),
                );
              },
            ),
          ],
        ),
        title: const Text("–õ–µ–Ω—Ç–∞", style: AppTextStyles.h1),
        actions: [
          IconButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (_) => const Basic()),
              );
            },
            icon: const Icon(CupertinoIcons.bubble_left_bubble_right),
          ),
          Stack(
            children: [
              IconButton(
                onPressed: () async {
                  await Navigator.push(
                    context,
                    MaterialPageRoute(builder: (_) => NotificationsScreen()),
                  );
                  setState(() {
                    _unreadCount = 0;
                  });
                },
                icon: const Icon(CupertinoIcons.bell),
              ),
              if (_unreadCount > 0)
                Positioned(
                  right: 10,
                  top: 5,
                  child: Container(
                    padding: const EdgeInsets.all(4),
                    decoration: const BoxDecoration(
                      color: Colors.red,
                      shape: BoxShape.circle,
                    ),
                    child: Text(
                      "$_unreadCount",
                      style: const TextStyle(fontSize: 10, color: Colors.white),
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),

      body: FutureBuilder<List<Activity>>(
        future: _future,
        builder: (context, snap) {
          if (snap.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snap.hasError) {
            return Center(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text('–û—à–∏–±–∫–∞: ${snap.error}'),
                    const SizedBox(height: 12),
                    OutlinedButton(
                      onPressed: () =>
                          setState(() => _future = _loadActivities()),
                      child: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
                    ),
                  ],
                ),
              ),
            );
          }

          final items = snap.data ?? const <Activity>[];

          // –¢–í–û–ô –ø—Ä–µ–∂–Ω–∏–π padding —Å–æ—Ö—Ä–∞–Ω—è–µ–º
          return ListView(
            padding: const EdgeInsets.only(
              top: kToolbarHeight + 38,
              bottom: 12,
            ),
            children: [
              for (int i = 0; i < items.length; i++) ...[
                if (items[i].type == 'post') ...[
                  _buildPostCard(context, items[i]),
                  const SizedBox(height: 16),
                ] else ...[
                  ActivityBlock(activity: items[i],currentUserId: widget.userId,),
                  const SizedBox(height: 16),
                ],
                // –í–°–¢–ê–í–ö–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –û–î–ò–ù –†–ê–ó
                if (i == 0) ...[
                  _buildRecommendations(),
                  const SizedBox(height: 16),
                ],
              ],
            ],
          );
        },
      ),
    );
  }

  Widget _buildRecommendations() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.symmetric(horizontal: 12),
          child: Text(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å",
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
          ),
        ),
        const SizedBox(height: 12),
        SizedBox(
          height: 282,
          child: ListView(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 12),
            children: [
              _friendCard(
                "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞",
                "36 –ª–µ—Ç, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                "6 –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π",
                "assets/Recommended_1.png",
              ),
              const SizedBox(width: 12),
              _friendCard(
                "–ê–Ω–∞—Ç–æ–ª–∏–π –ö—É—Ä–∞–≥–∏–Ω",
                "38 –ª–µ—Ç, –ö–æ–≤—Ä–æ–≤",
                "4 –æ–±—â–∏—Ö –¥—Ä—É–≥–∞",
                "assets/Recommended_2.png",
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _friendCard(
    String name,
    String desc,
    String mutual,
    String avatarAsset,
  ) {
    return Container(
      width: 220,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: const [
          BoxShadow(color: Colors.black12, blurRadius: 1, offset: Offset(0, 1)),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(60),
            child: Image.asset(
              avatarAsset,
              width: 120,
              height: 120,
              fit: BoxFit.cover,
            ),
          ),
          const SizedBox(height: 12),
          Text(
            name,
            style: const TextStyle(fontWeight: FontWeight.w600),
            overflow: TextOverflow.ellipsis,
            maxLines: 1,
          ),
          const SizedBox(height: 4),
          Text(
            desc,
            style: const TextStyle(fontSize: 12, color: AppColors.text),
            overflow: TextOverflow.ellipsis,
            maxLines: 1,
          ),
          const SizedBox(height: 4),
          Text(
            mutual,
            style: const TextStyle(fontSize: 12, color: AppColors.text),
            overflow: TextOverflow.ellipsis,
            maxLines: 1,
          ),
          const SizedBox(height: 8),
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: () {},
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.secondary,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
              ),
              child: const Text(
                "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                style: TextStyle(color: Colors.white),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPostCard(BuildContext context, Activity a) {
    if (a.type != 'post') return const SizedBox.shrink();

    return Container(
      width: double.infinity,
      decoration: const BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(width: 0.5, color: AppColors.border),
          bottom: BorderSide(width: 0.5, color: AppColors.border),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(12),
            child: Row(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(20),
                  child: Image.network(
                    a.userAvatar,
                    width: 50,
                    height: 50,
                    fit: BoxFit.cover,
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        a.userName,
                        style: AppTextStyles.name,
                        overflow: TextOverflow.ellipsis,
                      ),
                      Text(
                        a.postDateText,
                        style: AppTextStyles.date,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                ),
                IconButton(
                  onPressed: () {},
                  icon: const Icon(CupertinoIcons.ellipsis),
                ),
              ],
            ),
          ),
          Image.network(
            a.postMediaUrl,
            fit: BoxFit.cover,
            height: 300,
            width: double.infinity,
          ),
          Padding(
            padding: EdgeInsets.all(12),
            child: Text(a.postContent),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12),
            child: Row(
              children: [
                /*const Icon(
                  CupertinoIcons.heart,
                  size: 20,
                  color: AppColors.red,
                ),
                const SizedBox(width: 4),
                Text(a.likes.toString()),*/
                _PostLikeBar(post: a, currentUserId: widget.userId),
                const SizedBox(width: 16),
                GestureDetector(
                  onTap: () {
                    showCupertinoModalBottomSheet(
                      context: context,
                      expand: false,
                      builder: (context) => const CommentsBottomSheet(),
                    );
                  },
                  child: Row(
                    children: [
                      Icon(
                        CupertinoIcons.chat_bubble,
                        size: 20,
                        color: AppColors.orange,
                      ),
                      SizedBox(width: 4),
                      Text(a.comments.toString()),
                    ],
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 12),
        ],
      ),
    );
  }
}

class _PostLikeBar extends StatefulWidget {
  final Activity post;
  final int currentUserId;

  const _PostLikeBar({
    super.key,
    required this.post,
    required this.currentUserId,
  });

  @override
  State<_PostLikeBar> createState() => _PostLikeBarState();
}

class _PostLikeBarState extends State<_PostLikeBar> with SingleTickerProviderStateMixin {
  bool isLiked = false;
  int likesCount = 0;
  bool _busy = false;

  late AnimationController _likeController;
  late Animation<double> _likeAnimation;

  // —Ç–æ—Ç –∂–µ —ç–Ω–¥–ø–æ–π–Ω—Ç, —á—Ç–æ –∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  static const String _likeEndpoint = 'http://api.paceup.ru/activity_likes_toggle.php';

  @override
  void initState() {
    super.initState();
    isLiked = widget.post.islike;   // –±–µ—Ä—ë–º —Å—Ç–∞—Ä—Ç –∏–∑ –º–æ–¥–µ–ª–∏
    likesCount = widget.post.likes;

    _likeController = AnimationController(vsync: this, duration: const Duration(milliseconds: 200));
    _likeAnimation = Tween<double>(begin: 1.0, end: 1.3).animate(
      CurvedAnimation(parent: _likeController, curve: Curves.easeOutBack),
    );
    _likeController.addStatusListener((s) {
      if (s == AnimationStatus.completed) _likeController.reverse();
    });
  }

  @override
  void dispose() {
    _likeController.dispose();
    super.dispose();
  }

  Future<void> _onTap() async {
    if (_busy) return;

    // –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setState(() {
      _busy = true;
      isLiked = !isLiked;
      likesCount += isLiked ? 1 : -1;
    });
    _likeController.forward(from: 0);

    final ok = await _sendLike(
      activityId: widget.post.id,              // id –ø–æ—Å—Ç–∞
      userId: widget.currentUserId,            // —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      isLikedNow: isLiked,
      type: 'post',                            // –ö–õ–Æ–ß–ï–í–û–ï: —Ç–∏–ø –ø–æ—Å—Ç
    );

    if (!ok && mounted) {
      // –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setState(() {
        isLiked = !isLiked;
        likesCount += isLiked ? 1 : -1;
      });
    }
    if (mounted) setState(() => _busy = false);
  }

  Future<bool> _sendLike({
    required int activityId,
    required int userId,
    required bool isLikedNow,
    required String type, // 'activity' | 'post'
  }) async {
    final uri = Uri.parse(_likeEndpoint);
    try {
      // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—Ç—ã –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏
      print('[LIKE] POST $uri type=$type userId=$userId activityId=$activityId action=${isLikedNow ? 'like' : 'dislike'}');

      final res = await http
          .post(
            uri,
            body: jsonEncode({
              'userId': '$userId',
              'activityId': '$activityId',     // –æ–¥–Ω–æ –∏–º—è –∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤
              'type': type,                    // –¥–æ–±–∞–≤–∏–ª–∏ —Ç–∏–ø
              'action': isLikedNow ? 'like' : 'dislike',
            }),
          )
          .timeout(const Duration(seconds: 10));

      if (res.statusCode != 200) return false;

      final raw = utf8.decode(res.bodyBytes);
      // –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ (Map | List | —Å—Ç—Ä–æ–∫–∞)
      dynamic data;
      try { data = json.decode(raw); } catch (_) { data = null; }

      bool ok = false;
      int? serverLikes;

      if (data is Map<String, dynamic>) {
        ok = data['ok'] == true || data['status'] == 'ok';
        serverLikes = int.tryParse('${data['likes']}');
      } else if (data is List && data.isNotEmpty && data.first is Map<String, dynamic>) {
        final m = data.first as Map<String, dynamic>;
        ok = m['ok'] == true || m['status'] == 'ok';
        serverLikes = int.tryParse('${m['likes']}');
      } else {
        final t = raw.trim().toLowerCase();
        ok = (res.statusCode == 200) && (t == 'ok' || t == '1' || t == 'true');
      }

      if (ok && serverLikes != null && mounted) {
        setState(() => likesCount = serverLikes!);
      }
      return ok;
    } on TimeoutException {
      return false;
    } catch (_) {
      return false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      behavior: HitTestBehavior.opaque,
      onTap: _onTap,
      child: Row(
        children: [
          ScaleTransition(
            scale: _likeAnimation,
            child: Icon(
              isLiked ? CupertinoIcons.heart_solid : CupertinoIcons.heart,
              size: 20,
              color: AppColors.red,
            ),
          ),
          const SizedBox(width: 4),
          Text(likesCount.toString()),
        ],
      ),
    );
  }
}

